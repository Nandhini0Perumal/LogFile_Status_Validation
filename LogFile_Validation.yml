---
- hosts: localhost
  gather_facts: no
  tasks:
  - name: Run the commands remote system
    win_command: "{{item}}"
    with_items:
    - "\\ServerName\Directory\Bin\scd.exe -batch=DWH_AVAIL_POS -ba_date=20210804 -type=DWH_AVAIL_POS -ba_queue=BATCH -ba_priority=high=ba_waitresult"
    - "\\ServerName\Directory\Bin\scd.exe -batch=ALLPORT_VLSD -ba_date=20210415 -type=ALLPORT_VLSD -ba_queue=BATCH -ba_priority=high=ba_waitresult"
    register: output_1
  - debug: var=output_1

  - win_find:
      paths: C:/log_file_location/
      patterns: "*.txt"
      recurse: yes
    register: files_matched

  - set_fact:
      latest_files: "{{ latest_files | default([])  + [item.path] }}"
    register: pathh
    loop: "{{ files_matched.files | sort(attribute='mtime', reverse=true) }}"
    when: "item.path | dirname not in latest_files | default([]) | map('dirname')"
    loop_control:
      label: "{{ '%Y-%m-%d %H:%M:%S' | strftime(item.mtime) }} {{ item.path }}"
  
  - set_fact:
      latest_file: "{{latest_files | to_json }}"

  - name: removing square brackets
    shell: echo "{{latest_file}}" | sed 's/[][]//g'
    register: file_path
    delegate_to: localhost
    
  - debug:
      msg: "{{file_path.stdout}}"

  - name: Extraction check
    win_lineinfile:
      name: "{{file_path.stdout}}"
      line: "The extraction 'DWH_AVAIL_POS' is complete"
      regexp: "([0-9]+( [0-9]+)+)-[0-9]+:[0-9]+ [a-zA-Z]+ The extraction '[^']*' is complete"
      state: absent
    check_mode: yes
    register: conf
    failed_when: (conf is changed) or (conf is failed)
    ignore_errors: true
 
 - debug: var=conf.msg

  - name: Status check
    win_lineinfile:
      name: "{{file_path.stdout}}"
      line: "Status :Finished"
      regexp: "([0-9]+( [0-9]+)+)-[0-9]+:[0-9]+ [a-zA-Z]+ Status: Finished"
      state: absent
    check_mode: yes
    register: conf2
    failed_when: (conf2 is changed) or (conf2 is failed)
    ignore_errors: true
  - debug: var=conf2.msg

  - name: success message
    debug:
      msg: "Status Complete"
    register: complete_status
    ignore_errors: true
    when:
      - (conf.msg == "")
      - (conf2.msg == "")

  - name: If matching string not found
    debug:
      msg: "Status incomplete"
    when:
      - (conf.msg != "")
      - (conf2.msg != "")
